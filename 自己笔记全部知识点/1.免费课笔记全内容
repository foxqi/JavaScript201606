第一类    JS的知识点

1.JS是用来干什么的：（JS在做UI效果时，就是用来操作css的；）
    1）他就是用来操作css的--UI效果
    2）ajax获取数据
 所有面向对象开发的语言就叫做编程语言，js是面向对象开发的语言
2.JS主要分为三部分
ECMAScript:语法 变量，命名，循环，数据类型，判断等等，流程控制语句。。。 完全兼容的
DOM:document object model 文档对象模型 操作DOM的操作  不完全兼容--可以处理成兼容
BOM:browser object model 浏览器对象模型 操作window的操作 彻底不兼容，而且没法处理


3:JS中页面的加载顺序是从上到下的执行；

4.JS书写步骤：1.html结构     2.css样式      3.JS 行为

5.页面由三部分组成
HTML：超文本标记语言--打框架- 结构
css:层叠样式表--加样式--样式
javascript:轻量级的脚本语言--实现功能--行为

行为样式结构三者相分离


6.
CSS引入方式： 1.行内  2.内嵌  3.外链
JS引入方式
    1.行内：<div id="div1" onclick="alert(3-2)">珠峰培训</div> JS代码写在双引号里；但是不建议使用行内；
    2.内嵌:script可以放在页面的任何一个地方：一般放在body最后或者head里面；但是，放在以上两种中是有区别；
    注意：
    如果放在head里，必须加系统的onload:window.onload事件；
    如果放在body后面，不需要给JS中window.onload;
    <script>
        alert(123)
    </script>
    3.外链 <script src="1.js"></script>---项目开发中都用外链；
    注意：如果引入外链的话，在两个script中一定不能再写代码，否则，肯定不会执行
7.事件：
1）鼠标事件：
    onclick:点击事件
    onmouseover:当鼠标移入的时候
    onmouseout:当鼠标移出的时候
2）键盘事件：
3）系统事件：
    window.onload:当页面加载完成的时候；
    window.onscroll：触发浏览器的滚动条事件
4）表单事件：
5）事件源：
。。。

8.JS输出方式：--目的是为了调试
1）alert：在浏览器中弹出需要的内容；
2）console.log()：在控制台输出；
3）console.dir():可以详细的打印出对象上对应的属性和方法；
4)console.table():把对象以表格的形式打印出来；
5)document.write:可以把要输出的内容直接打印在页面上：
但需要注意：在window.onload事件中，如果已经有了很多内容，这时候，输出document.write()；会彻底的清空页面；所以，不要在window.onload中写document.write；

9.控制台页卡分析：
    elements:调试页面的结构和样式；调好了以后，直接复制到我们的css样式表中；（页卡：用来调试html+css）
    console:用来打印我们的输出日志；                                    （页卡：打印出我们要输出的内容）
    netWork:发送我们请求的所有文件                                      （页卡：用来放所有请求文件）
    resources:存储我们的所有文件；                                    （页卡：里面放了我们所有的文件：html,JS,图片...）

10.输出方式
 1）alert() 在页面中弹出我们要的内容
 2）console.log() 通过控制台的console页卡输出我们要的内容；
 3）console.dir() 可以打印出对象的详细信息；
 4)console.table() 以表格的形式打印对象；
 5）confirm(); 他有两个返回值 true; false;
 6)document.write() 用来给页面输出内容
    注意：在window.onload里，如果如果document.write();会覆盖掉页面原有的内容；（会清空页面，只显示document.write()的内容）
 7）obj.innerHTML=xxx; 用来给元素添加内容

11.JS命名规范
1）匈牙利命名规范就是驼峰式命名规范
类型	前缀	类型	实例
数组	a	Array	aItems
布尔值	b	Boolean	bIsComplete
浮点数	f	Float	fPrice
函数	fn	Function	fnHandler
整数	i	Integer	iItemCount
对象	o	Object	oDiv1
正则表达式	re	RegExp	reEmailCheck
字符串	s	String	sUserName
变体变量	v	Variant	vAnything
2）JS中复合样式的写法:不能写横杠，必须第二个单词的首字母大写；
在CSS中：background-color
在JS中：backgroundColor
3）o开头--代表一个对象
   a开头--代表一个数组
   （以此类推）
**************************************************************************************************************
第二类    JS(DOM)获取元素的方式

1.JS获取元素的方式：
1）document.getElementById('div1')
       文档     得到 元素 通过id('div1')
      在文档下，通过id来获取一个元素；
2）context.getElementsByTagName('li');
     通过标签名获取元素；获取到的是一组元素
        1.他有一个自带的属性.length-->知道获取的元素的个数
        2.通过索引可以拿到对应的元素,索引从0开始；
        3.context 上下文：限制范围的获取元素；
2.需求：如果我想拿到div这个元素，请问，有几种方法？
      第一种写法；
      var oDiv=document.getElementById('div1');
      oDiv.style.backgroundColor='green';
      第二种写法
      var oDiv=document.getElementsByTagName('div')[0];
      如果获取的是一个元素，必须得写[0]，否则无法给他加样式；
3.DOM中获取元素的方式
    1.document.getElementById() ID必须在document下获取元素；
    2.context.getElementsByTagName(标签名)[] 通过标签名获取元素；
    3.document.getElementsByName(); 通过name获取元素，最好应用在获取表单元素；而且只能在document下获取name;
    4.context.getElementsByClassName(class名)[];
    5.document.documentElement 整个HTML;
    document.body 整个body；
    document.documentElement.clientWidth||document.body.clientWidth;
    document.documentElement.clientHeight||document.body.clientHeight;
    6.document.querySelector(); 获取的是一个元素；
    7.document.querySelectAll(); 获取的是一组元素；
4.关于DOM的动态创建
    1.创建一个新元素
    document.createElement('标签名')；
    obj.cloneNode(boolean)； 如果参数为true：代表深度克隆，能把该元素下的所有内容及子标签都克隆； 如果参数为false：只克隆当前元素的标签，即一个空标签而已；
    2.插入元素
    parent.appendChild(newEle); 把新元素newEle,插入到父级容器的末尾；
    appendChild返回值：是新插入的那个元素；

    parent.insertBefore(newEle,oldEle); 把新元素插入到指定元素的前面；
    insertBefore返回值：是新插入的那个元素；
    3.替换元素
    parent.replaceChild(newEle,oldEle);
    返回值：是被替换的那个元素；
    4.删除元素
    parent.removeChild(curEle);
    返回值：是被删除的那个元素；
***************************************************************************************************
第三类   节点
1.标签==元素==元素节点
2.关于节点类型
            nodeType    nodeName     nodeValue
文本节点       3           #text        文本内容
元素节点       1          大写的标签名     null
注释节点       8           #comment     注释内容
document      9           #document     null
3.关于节点关系
parentNode 父节点：结构上的父级
childNodes 拿到的所有节点：文本节点，注释节点，元素节点，document节点。
children 其他浏览器下拿到的都是元素节点，但是IE8会受注释节点的影响；
previousSibling 上一个哥哥节点（可以是任意节点类型）  previousElementSibling 上一个哥哥元素节点(问题：不兼容IE6-8)
nextSibling 下一个弟弟节点           nextElementSibling下一个弟弟元素节点(问题：不兼容IE6-8)
firstChild 大儿子 第一个节点
lastChild 小儿子  最后一个节点
********************************************************************************************************
第四类  关于JS抽象概念
1. 关于对象：
     万物皆对象：
     对象{name:'zhufeng',age:18} 一个对象有多个属性名和属性值组成，每组之间用","隔开；
     new Array()--实例创建方式； []--字面量创建方式,
     new Date();
     new RegExp()--实例创建方式；/\d+/--字面量创建方式

2.变量：可变的量，别名
var aa=xxx;
var 定义变量
var：是用来定义变量的
定义变量的步骤：var 变量名=xxxxxxxxxxxx;
变量，就是物体的别称（别名），见到变量，就像见到物体本身一样；
变量如果不存在，会报错；
    同时定义几个变量，不能用等号，可以用逗号隔开；
    var a=b=c=d=5; 定义的变量只有a;
    var a, b, c,d; 定义的变量a,b,c,d;

3.属性操作：操作属性的方式必须通过"."或者是[""];
    1）关于"."：它是用来操作属性的；
    ".":是“的”的意思
    在JS中通过"."来操作元素的属性
    例如：oDiv2.style.visibility='visible';
    oDiv2的style属性上的visibility赋值为'visible';
    2）[]
    （"=" 是用来赋值的）
    3）JS中操作元素的class属性，只能写成obj.className;
    4）自定义属性：
    JS元素上的自定义属性，用console.dir()可以看到，但是，在element也卡中，元素标签上看不到；
    5)attribute系列：
            获取属性 getAttribute（‘属性名’） 通过属性名获取属性值；
            设置属性 setAttribute('属性名','属性值')
            移除属性 removeAttribute（‘属性名’）//如果想干掉标签上的属性，最好的办法就是用它
        关于"."和Attribute
            1.如果标签上定义了自定义属性，通过"."获取不到这个自定义属性的属性值，但是通过getAttribute能获取到；
            2.通过"."给元素上设置自定义属性，在标签上看不到；但是通过setAttribute设置自定义属性，标签上可以看到；
        注意事项：. 和 attribute 一定不能混搭；即 通过点设置属性，就通过点来获取属性；通过setAttribute来设置属性，
        getAttribute来获取属性；
**********************************************************************************************************
第五类   JS中的数据类型  包括 基本数据类型和引用数据类型

一）
 1）基本数据类型：
   字符串string;  数字 number; 布尔 boolean;  null; undefined
 2）引用数据类型：
    对象数据类型：数组; object ;new Date ;/^( +)|( +)$/
    函数数据类型 function(){}

基本数据类型和引用数据类型的区别：
    一句话区别：基本数据类型是对值的操作，引用数据类型是对地址的操作；
    基本数据类型也叫做值类型，直接按值来操作
二）
数据类型检测：
    1)typeof
    他用来检测基本数据类型；
    通过typeof拿到的东西，都被字符串包裹着:外面是引号，里面才是我们真正的数据类型；"string" "number"
    typeof的局限性：他不能用来检测对象数据类型
    2)obj.constructor ：判断当前元素所属的函数类型；通过函数名就能看到这个元素是什么类型的对象； function Array(){};
    3)ary instanceof Array：判断ary 是不是 Array的一个具体实例；（instanceof  : a instanceof Array--a 是不是数组这个类的一个实例；）
    4)Object.prototype.toString.call(); "[object String]"
三）
基本数据类型的细分
1）字符串："string"
    1.   概念：用单引号或者双引号包裹的1-多个字符，都是字符串；
    个人建议：在JS中，字符串最好用单引号； 因为页面中标签上的属性值默认都是双引号；
    2.   习惯：一般情况，属性用双引，字符串用单引；
    3.   字符串和变量名的区别：字符串有引号，变量没有引号（变量如果不存在，会报错）
        alert(va)---变量
        alert('va')---字符串
        error: zhufeng is not defined --你这个变量没有被定义
    4.   + 在JS中有两个作用：1）当字符串和数字进行相加的时候，“+”的作用是字符串拼接 2）数学运算； 系统比较懒，默认会选择第一个，即只进行字符串拼接.
    5.  数学运算中，除了+在JS中有字符串拼接的功能外，其他-,*,/都可以正常进行数学运算，他们都有隐式转换的功能
    6.  字符串的索引（下标）是从0开始；字符串长度通过length属性来拿到；（字符串索引从0开始，并且也有length属性）
    7.  字符串常用方法
     第一类：通过下标找到对应的字符或者编码
         1.charAt() 通过下标找字符串中对应的字符
         2.charCodeAt(); 通过下标找到每个字符对应的ASCII编码值；
     第二类：通过字符找到对应的索引
         3.indexOf()  从前往后找，找到返回的当前字符对应的索引；找不到返回的都是-1；
         4.lastIndexOf()从后往前找，找到返回的当前字符对应的索引；找不到返回的都是-1；
     第三类：字符串截取
         5.substr(n,m) 从索引n开始，往后找m个，原字符串不发生改变
         6.substring(n,m) 从索引n开始，到索引m，但不包含m；
         7.slice(n,m)从索引n开始，到索引m，但不包含m；可以通过负数截取；
     第四类：字符串转数组
         8.split(切割形式) 通过切割形式转成数组；
     第五类： 字符串转大小写
         9.toUpperCase() 字符串转大写
         10.toLowerCase() 字符串转小写
     第六类：字符串替换以及以后会用在正则的；
         11.replace('',要替换的内容); 字符串替换
         12.search（'内容'）; 用来查找字符的，找到返回对应字符的索引； 找不到-1；
         13.match（'内容'）；字符串匹配，找到，就把找到的内容以数组的形式返回；找不到null；


2）数字类型："number"     （0 正数 负数 小数 NaN ）
1.如何把字符串转成数字数据类型；
    （1）严格转换：Number();
        NaN: not a number 不是一个数字；
        NaN跟任何值都不想等，包括他自己，也不相等；
        NaN出现的情况：
        1）转换失败的时候出现NaN；
        2）不合法运算，也会出现NaN;
        isNaN(): 检测是否为非有效数字;默认的走了此程序：Number()->是否为非有效数字的判断
                 非有效数字-true； 有效数字：false；
    （2）非严格转换
        parseInt():只能进行整数的转换：从左往右检查，如果不是数字，立马停止；
        parseFloat():能进行小数的转换；从左往右检查，如果不是数字或者小数点，立马停止；
        数字常用的方法：toFixed(要保留的小数的个数) eg:alert((23.1%5).toFixed(3)); 我们在保留小数个数的同时，还是四舍五入的功能
2.其他数据类型转为数字类型的转换规律：
        1.null ->0 ; undefined->NaN
        2.布尔 false :0; true:1
        3.[]:0 转换步骤：先通过toString()转成''->0;


3).布尔  boolean:true false
Boolean();
    1.规律：除了 0 NaN '' null undefined 为false之外，其他都为真true；
    2.其他数据类型转为Boolean数据类型：
        1）Boolean() ->true false
        2)！用来取反 在有！的情况下，默认会进行布尔值的转换；
        eg.!3：先判断3是否为真，接着取反--如果是真，取反后是假；
        3)!! 取反再取反,也是进行布尔值的转换，相当于没转
        4）if（条件）:if语句中，如果条件为一个值，默认进行布尔值的转换;
        5）if(表达式)如果是个表达式的话，默认进行布尔值的转换； -->if('3'==3):true  if('3'===3):false
    3.数据类型的比较规律
      1)object==object  对象数据类型是进行地址的比较 []==[]-false
      2)object==string  都转成字符串 []==''-true
      3)object==number  都转成数字 []==0->true  []==2->false
      4)object==boolean 都转成数字 []==![]
                          * 1.有！号的情况下，会优先进行布尔值的转换 ![]-false-0;
                          * 2.[] ->0
      5)string==number 都转成数字  ''==0 ->true
      6)string==boolean 都转成数字 ''==![] ->true
      7)number==boolean 都转成数字 0==false ->true; 1=false->?false
      8)null==undefined =》true ；null===undefined =》false;
      遇到第8个，以上规律都不起作用；
      9)NaN 他跟任何值都不相等，包括他自己

      注意事项：需要明白哪些会进行隐式数据类型转换，但是不要用；
      1）在进行运算的时候，都把他们变成相同的数据类型
      2）在进行比较的时候，用===严格比较



4).null和undefined（null 空对象）
    1.null:现在没有，以后会有；
      undefined:现在没有，以后也不会有；
    2.隐式转换：
    null:默认会转为数字0；--typeof null->"object"
    undefined:默认会转为NaN;--typeof nudefined->"undefined"


四）
引用数据类型的细分
1)引用数据类型包含两部分：对象数据类型和函数数据类型
   1..对象数据类型创建三步骤：
       1）开辟一个空间地址
       2）把对象的属性名和属性值存在这个空间中
       3）把空间地址赋值给变量名

2）对象数据类型 object new Date; Math Array--[1,'珠峰',34]; RegExp(正则)-- /\d+/....
    1)对象的增删改查；
            1.增加、更改--看情况来处理
               obj.name=xxx;(当name属性不存在的时候，他是增加，否则，它是更改)
                  obj.name='peixun';//对象的修改；
                  obj.sex='lalalla';//对象的增加；
            2.查
                  console.log(obj['ad'])//对象的查找
                  或者 alert(obj.name);
            3.删除
                  obj.name=null;//假删除
                  delete obj.name;//真删除 结果：如果再获取--undefined;
            4.对象的循环用for in
                   for(var attr in obj){
                   console.log(attr+':'+obj[attr])
                    }
     2)对象有不重名的特性；
     3)当对象的属性名为数字的情况下，对象会出现的情况
         1..当属性名为数字的时候，打印出来时，是按照属性名数字大小排列的；
           eg: var obj={0:'李慧',18:'張直',9:'郭园园',2:'岳飞宇'};
         2..对象中，如果想拿到对应的属性值的话，属性名放在[]中，一定要加引号，但是数字除外；
           console.log(obj['0'])
           console.log(obj[18])
     4)对象中的属性如果没定义--undefined； 变量如果没定义--报错
     5)对象只包含两部分：属性+方法
        属性：元素身上固有的特征 比如：我们鼻子眼睛嘴；
        方法：就是能干什么事情  比如：跳舞，打代码，看书。。。
        在JS中属性和方法的区别：属性没有括号（obj.name）;方法有括号--aa();



3)数组的写法[a,b,c,d]
    1.学习数组常用方法需要注意4点：
        1.方法的作用
        2.需要传什么参数
        3.是否有返回值，返回值是什么
        4.原数组是否发生改变
    2.数组常用方法
        第一类 增加，删除，替换
            1.splice()
                删除  splice(n,m) 作用：从索引n开始，删除m个； 返回值：被删除的数据以一个新数组的形式返回；原数组发生改变；
                添加 ary.splice(n,0,x);作用：从索引n开始，删除0个；把x的新内容添加到索引n之前； 返回值：空数组； 原数组发生改变；
                替换 ary.splice(n,m,x); 作用：从索引n开始，删除m个，替换成x新内容；返回值：被删除的数据以一个新数组的形式返回；原数组发生改变；
            2.push:作用：给数组末尾添加新内容；
                 返回值：数组的最新长度
                 原数组发生改变
            3.pop:作用：删除数组最后一项
                 返回值：被删除的内容
                 原数组发生改变
            4.unshift:作用：给数组开头添加新内容；
                 返回值：数组的最新长度
                 原数组发生改变
            5.shift:作用：删除数组第一项
                 返回值：被删除的内容
                 原数组发生改变
        第二类 查找和克隆
            6.slice(n,m) 从索引n截取到索引m 不包含m
            需求[n项,m项]求出第n项到m项，并且原数组不发生改变：slice(n-1,m)
            7.数组拼接：ary1.concat(ary2,ary3...)
            3.克隆
                slice(0)/slice();
                ary.concat();
                splice（0）；
        第三类 数组的排序和排列
            8.排列-数组翻转:reverse()返回值：翻转后的数组； 原数组发生改变；
            9.排序sort(function(a,b){return a-b})（a-b从小到大排列，b-a从大到小排列）返回值：排序后的数组； 原数组发生改变；
            如果sort（）里面不传参，只能实现1-10以内的
        第四类 数组转字符串
            10.toString() 作用：把数组转成字符串； 返回值：以逗号分隔的字符串； 原数组没发生改变；
            11.join(拼接字符) 作用：把数组转成任意形式拼接的字符串； 返回值：任意形式拼接的字符串； 原数组没有发生改变；
               join('+')配合eval可以实现求和，其他的-，*，/类型；
            12.eval() 把字符串作为JS代码来执行；
               eg.var ary=[1,2,3,2]
                 console.log(eval(ary.join('+')))//这样就可以相加了
        第五类 常用但不兼容的
            12.indexOf();查找数组中是否有这一项内容，如果有，返回对应内容的索引，如果没有没有返回-1； 注意：不兼容IE6-8；
            13.forEach(遍历数组中的每一项)，里面首先是个匿名函数；这个匿名函数中有俩个参数；item:数组中的每一项； index：数组中的每一项的索引
            forEach(function(item,index){}) 没有返回值
               ary.forEach(function(item,index){//item:数组中的每一项； index：数组中的每一项的索引
                                   console.log(item+':'+index)
                           })
               (其实和for in循环是差不多的)
            14.map(); 用法和forEach()一样，但是他有返回值；
                        var res=ary4.map(function(item,index){
                            console.log(item+'=>'+index)
                            return item*100;
                        })
    3.总结性的东西
        1)删除数组最后一项
            1.ary.pop();
            2.ary.splice(ary.length-1,1)
            3.ary.splice(ary.length-1);
            4.ary.length--; ary.length=ary.length-1; ary.length-=1;
            5.delete ary[ary.length-1]
        2)给数组最后添加一项
            1.ary.push('如花')
            2.ary.splice(ary.length,0,'');
            3.ary[ary.length]='';
        3)清空数组；
            1.ary.splice(0)
            2.ary4=[];
            3.ary4.length=0;

    4.数组和对象的关系：数组也是对象，它也有属性名和属性值；它的属性名实际上就是他的索引；


4)日期对象 new Date();
    1.oDate.getFullYear() 年
    2.oDate.getMonth()+1 月份获取时一定要+1；
    3.oDate.getDate() 日
    4.oDate.getDay() 星期 注意：周日 0；
    5.oDate.getHours() 时
    6.oDate.getMinutes() 分
    7.oDate.getSeconds() 秒
    8.getTime() 距离1970年1月1日00时00分00秒的毫秒数

5)定时器
    1. setTimeout(fn,1000)  1000毫秒后执行一次；而且仅仅只执行一次
    2.setInterval(fn,500) 每隔500毫秒执行一次
    3.定时器的返回值：第几个定时器；
    4.定时器小技巧：每开启一个定时器之前，一定要先关闭没用的定时器；
    5.定时器关闭
    clearTimeout  可以关闭setTimeout(); 也可以关闭 setInterval();
    clearInterval 可以关闭setTimeout(); 也可以关闭 setInterval();
    注意：我们一般都是成双成对的关闭；

6)Math 常用方法   （仅仅只是个对象）
    1.Math.random() 0-1之间的随机小数；不包含1；
    Math.random()*(m-n)+n; 求一定范围的随机数公式；
    2.Math.round() 四舍五入的整数
    3.Math.floor() 向下取整
    4.Math.ceil() 向上取整
    5.Math.sqrt() 开平方
    6.Math.pow() 幂
    7.Math.abs() 取绝对值
    8.Math.max() 求最大值
    9.Math.min() 求最小值

7)函数数据类型
    1.函数的写法：
        function 函数名(){
           alert(123)
        }
        函数：就是用来干我们想干的事情的；
                1)函数包含两部分：定义 和 调用
                函数只定义，不调用，是没法执行的；必须同时定义后并调用，才能执行
                    //函数定义部分：
                    function 函数名(){函数定义时,小括号里的是参数--形参

                    }
                    //函数调用
                    函数名() 函数调用时，小括号中的参数--实参；
    2.关于函数：函数只包含两部分--定义和调用
        1）定义--但是：函数定义阶段不会执行；
        function 函数名(){
            执行语句。。。
        }
        2）调用：函数名()；--调用后函数才能真正的执行；
        例子：
            需求：点击oDiv时，执行函数aa;
            oDiv.onclick=aa;//把函数表达式做为值赋值给oDiv.onclick事件；只有当oDiv的事件被触发的时候，才会执行aa这个函数；
            function aa(){
                alert(123)
            }
            //aa();//函数名aa代表了aa整个函数；但aa不能执行；真正的执行是调用；调用--函数名+（）--aa()

    3.函数包括：函数包含匿名函数和有名字的函数；
      函数按照是否有名字：有名函数，匿名函数
        匿名函数：
        1)把匿名函数当作值赋值给对象的事件；
        oDiv.onclick=function(){
                alert(123)
        };
    4.函数定义和执行
        函数定义阶段：
            1）开辟一个空间地址；
            2）把函数体中的JS代码作为字符串存在这个空间中
            3）把空间地址赋值给我们的函数名；
        函数执行的时候：
            1）首先会形成一个私有作用域：保护里面的变量不受外界的干扰，函数的这种保护机制，叫做闭包
            2)把以前堆内存空间中的字符串做为JS代码来执行

        2）函数封装：对于相同功能的代码，我们只封装一次，以后如果再使用此功能，直接调用即可，无需再写；
        传参：把不确定的因素，作为参数即可；以后使用，根据情况传真实的数据替换参数；
        函数自带了一个参数机制：arguments；
    5.堆内存和栈内存
        栈内存：1）提供了一个供JS代码执行的环境 2）把基本数据类型做为值都保存在栈内存中
        堆内存：里面存储了所有对象数据类型和函数数据类型的值；
                对象数据类型：存的是属性名和属性值；
    6.函数的参数：
       1.函数定义时,小括号里的是参数--形参；函数调用时，小括号中的参数--实参；
       2.如果函数定义了形参，但是函数调用时没有传实参;拿到的就是undefined;
       3.如果参数都不传或者传的是不确定的参数，而且没有形参接收的情况下，会是什么？
          函数天生自带了一个参数机制,arguments:无论是否传参，或者传参数不确定的情况下，arguments都能接收到；
        注意：操作class属性名的时候，因为class是保留字，不能用class，只能className；
    7.参数
        1.形参：
            如果定义了形参，但是没有传值，拿到的是undefined;
            形参传参有严格的顺序，必须从左往右传；
            关于函数传参：参数可以是任意数据类型；
            如果参数是个函数的话（其实他就是回调函数），关于传进来的这个参数，什么时候调用，我们是不知道的；另外，他可以调用无数次；

        2.函数的参数机制(系统内置的参数机制) arguments;
            方法 callee():代表的是函数本身；
            属性 length：代表实参的个数；
    8.关于函数的return
    在函数体外，如果能拿到函数中的值：return 返回值
        1.函数返回值：把函数中的内容通过return返回出来；一般在外面会用一个变量进行接收；
          1)函数返回值会出现两个undefined:
            1.函数如果没有写return --undefined;
            2.函数如果写了return，但是没有赋值 --undefined;
          2)return 后面可以返回任意数据类型；

        2.return 有阻断程序执行的作用：可以人为的控制函数执行阶段，你想让函数执行到哪里；就可以让他执行到哪里；
        3.return和continue；break的区别
              continue 跳出本次循环，以后循环继续
              break 直接跳出循环，以后不再循环了；
              跳出循环 :continue break;
              跳出函数；阻断函数执行：return；

    9.匿名函数包含连个：函数表达式 自执行函数（闭包）
        函数表达式:
            1)把函数作为表达式或者值赋值给元素的事件；
            2)把函数作为值赋值给变量；
        自执行函数写法：
            1.(function(形参){})(实参);
            2.~function(){}();
            3.+function(){}();
            4.-function(){}();
            5.!function(){}();

    10.关于元素的自定义属性：
        1.在页面加载的时候，浏览器会默认把标签上不认识的属性名和属性值干掉；
        2.漏洞：浏览器只会加载一次（只会检查一次）；
        等浏览器加载完成后，在执行JS代码的时候，给他添加上自定义属性；
    11.关于函数封装思路：
        1.保证html代码结构一致；目的是为了在同一父级下获取所有元素；
        2.实现主程序；
        3.传参；
    12.递归函数自己调用自己就是递归
**************************************************************************************
第六类  流程控制语句：包含两部分： 循环+判断

第一个.循环
  1.
    1）for循环--for循环用在很多地方
        1)循环包含四部：
            1.定义 var i=0;
            2.条件 i<ary.length
            3.语句 大括号{}中的语句进行执行
            4.自增 i++;
        var ary=[123,'zhufeng',true,function(){
                alert('789')
            }];
        for(var i=0; i<ary.length; i++){
            //alert(i)//0,1,2,3
            console.log(ary[i])
        }
        2)循环的停止条件：当条件不成立的时候，跳出循环；
    2）for in 循环--只用于对象循环；
    for(var attr in obj){
        console.log(attr)-->打印出的是属性名
        obj[attr]-->打印出的是属性值；
    }
    3）while循环
    var ary=[123,'zhufeng',true,function(){
            alert('789')
    }];
    var i=0;//定义
    while(i<ary.length){//条件
        console.log(ary[i]);//执行语句
        i++;//自增
    }
    4）do..while循环：
      无论条件是否成立，都会先执行一次，以后才会按照条件判断来执行对应的语句
      do{
          alert(i);
          i++;
      }while(i<5)

2.for 循环和while循环的区别：
    for循环用于长度已知的情况
    while循环用于长度未知的情况；

3. 跟循环相关的两个知识点：
   1.break 跳出循环，后面东西不再执行；
   2.continue 本次循环不执行，以后循环继续执行；

第二个.判断
 1.
   1）if elseif elseif ....else...
   if(条件1){
       执行语句1
   }else if(条件2){
       执行语句2
   }else{
       执行语句3
   }
   2）.if语句的多种写法
       1）if(条件){执行语句1}else{执行语句2}；
       2）条件?执行语句1:执行语句2;
       3)当语句2不存在的情况下：条件?执行语句1:null;
       4)如果if语句中没有else:if(条件) 执行语句1；
       5）&& 和 || 在if语句中的应用：
       走if语句的 &&: 条件&&语句1；
       走else语句的 ||: 条件||语句2；
   3）if的几种简写方式：
       1）只有if没有else的时候，可以省略大括号 eg:if('3'==3) alert(true)
       2)用 && 和 ||实现
       ('3'==3) && alert(true); //只能用在if语句中
       ('3'===3) || alert(false) //只能用在else语句中
 2.
   switch (值){
       case 值1:
           执行语句1
           break;
       case 值2:
           执行语句2
           break;
       default :
           执行语句3;
           break;
   }
   switch中的比较是严格比较；=== 值比较+类型比较；

    switch (i%4){
               case 0:
                   语句1;
                   break;
               case 1:
                   语句2;
                   break;
               default :
                   语句3;
                   break;
       }
 3.三元表达式/三目/三元运算符
   1）基本语法：条件？语句1：语句2；
       例子：'2'===2?console.log('两个相等'):console.log('两个不相等');
       如果if 语句中没有else的话，就不用执行语句2:
       2=='2'?console.log('两个相等'):null;

   2）三目 '3'==3?alert(true):alert(false);
   3)三目 或者 三元表达式 或 三元运算符
       三目： 条件？语句1：语句2；
       '3'==3?alert(true):alert(false);
       if('3'==3){
           alert(true)
       }
       三目中当语句2不存在的情况下；
       '3'==3?alert(true):null;

***********************************************************************************
第七类 算数运算符
1.关于this的指向
  当元素oDiv上的事件被触发的时候，会执行一个函数，函数中的this，指的是当前oDiv这个元素；
  或者理解为（当触发元素绑定事件的时候，会执行一个函数，函数中的this，指向当前这个元素）

2.运算符
    1)算术：+ - * / %;
    % 就是用来取余数的；--小技巧：有几种情况，就%几；
        ()小括号有提高优先级的作用；
    2)比较：<、>、<=、>=、==、===、!=、!==
        1）需要注意的第一点：
        var n=12;//0<n<10 :这么写一定是错的，必须写成&&的形式
        if(n>0 && n<10){
            alert('1位数')
        }else{
            alert('2位数')
        }
        2）
        == 比较的是值，不比较类型 ！=
        === 比较值，同时比较类型  ！==
    3)关于隐式数据类型的转换： - * / % ==;
        1）==:比较转换后的值，不比较数据类型；
        2）-,*,/,%
    4)赋值运算符
    =、+=、-=、*=、/=、%=
    5)比较运算：<、>、<=、>=、==、===、!=、!==
    == 比较值，不比较类型 !=
    === 值和类型都进行补缴 !==
    6)逻辑运算符：&& 与、|| 或、! 否
    && 两边为真才为真
    || 一边为真即为真
    运算符的优先级：算术>比较>逻辑>赋值
    7)其实我们通过tagName获取的一组元素和参数机制arguments获取的一组参数都是类数组；
        类数组：1）他们打印出来长得像数组
               2）他们都有数组的length属性
               3）他们都有数组的下标
               4）但他们不能使用数组的真正的方法；
3.调试的顺序
    1）先打开控制台看有没有报错；如果有报错，看报错在第几行
    2）如果控制台没有报错
    从上倒下检查代码能否正常执行；一块一块测试并用我们教过的输出方法，输出测试；
4.自定义属性
    需求：点击每个按钮的时候，弹出他对应的索引；
        for(var i=0; i<aBtn.length; i++){
            aBtn[i].index=i;//自定义属性
            aBtn[i].onclick=function(){
                //alert(i)//当我触发点击事件的时候，循环已经结束，i=4;为了解决i值的问题，我们让一个东西跟循环同步进步，保存每个正常的i值；
                alert(this.index);
            }
        }
    循环中，如果有点击事件，触发一个函数，函数中一定不能直接用i；因为，此时，循环早已经结束，i已经是最大值；
    （也可以用闭包）
*******************************************************************************************************
第八类  各种思路分析
1.选项卡思路分析
思路分析：
    1.拿到li上正确的索引：因为我要通过索引来把按钮和内容关联起来；
    2.点击每个按钮，让所有的按钮都变灭，让所有内容都隐藏
    3.让当前这个按钮变亮，同时，让这个按钮对应的内容显示；


2.JS热身运动
      实现思路：
              1）display : block none;
              2)opacity: 1 0;
              3)visibility:hidden visible
              4)定位
              5）margin
              。。。。
      实现步骤：
      当鼠标移入oDiv1时，让oDiv2显示；
      当鼠标移出oDiv1时，让oDiv2隐藏；
      6.热身运动
      1）思路：鼠标移入div1，显示div2；鼠标移出div1，隐藏div2；
          思路分析：
              1.display:none -display:block
              2.opacity:0 --opacity:1; opacity是有兼容问题，filter处理兼容
              3.visibility: hidden --visible;（能见度：隐藏--显示）
              4.marginLeft/marginTop/marginBottom/marginRight..
              5.left/top..

3.获取子元素的思路：
       1.获取到所有的子节点
       2.通过循环，判断每个子节点的nodeType是否等于1，如果等于1；说明它是元素节点，我们就把他保存到数组中；
       3.循环结束后，返回整个数组（数组中保存的就是每个元素节点）
4.封装获取上一个哥哥元素节点思路
       1.首先判断高级浏览器和低级浏览器；因为高级浏览器支持obj.previousElementSibling;他可以直接获取到上一个哥哥元素节点
       2.低级浏览器需要我们单独处理兼容：
       首先获取上一个节点prev;
       通过 while循环，最终找到上一个哥哥元素节点； 循环条件（是个节点 && 这个节点不是元素节点）
5.获取验证码
       1.封装完整版的获取随机数 1)n,m如果不是数组的处理 2）如果n>m 交换位置
       2.通过循环拿到4个随机数，然后把随机数当作字符串的索引获取对应的字符，把字符进行拼接，就是我们要的四个验证码
6.循环绑定事件中的两种实现思想：
       1.自定义属性：通过自定义属性，把正确的i值保存在标签的属性值上
         <input type='button' index=0/>
        2.闭包：把正确的i值保存在一个私有作用域里；什么时候子函数想用，都可以用父函数提前保存好的值；