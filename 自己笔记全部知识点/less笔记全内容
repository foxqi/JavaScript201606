1.在以后的工作中我们做移动端都要做什么？

[响应式布局]
  ->公司已经有PC版项目，我们需要把PC的项目在移动端进行访问，需要我们对页面的结果和样式都要进行调整：
  1）“PC端和移动端是不同俩套项目”:如果PC端展示的内容和结构比较复杂，移动端我们都是单独的设计一套项目（需要我们检测展示HTML页面的浏览器是PC端还是移动端）  例如（天猫、淘宝、京东、腾讯...）
  2）“PC端和移动端使用的是同一套项目”:PC端结构和内容比较简单，我们只需要在原来的项目基础上微调整一些就可以了 例如（华为官网、猎豹浏览器...）


  ->公司只需要做移动端产品即可
  由于用户的手机尺寸不一样，我们移动端开发出来的页面在样式结构上也是需要进行调整的


我们这一类别的前端开发基本上只能做的是HTML页面（h5页面也是HTML页面），只要是HTML页面就离不开浏览器（需要浏览器的引擎把我们编写的代码按照W3C的规范进行渲染）

2.PC端页面需要再PC端的浏览器中运行（谷歌、IE、火狐、欧朋、safari...），需要我们处理的就是浏览器兼容了；

[webApp]
    移动端页面一般也是运行在手机的浏览器中的（内置浏览器、UC、QQ、百度...），我们也需要处理移动端浏览器兼容（只要是安卓或者IOS系统下的手机，手机上的浏览器基本上都是webkit内核的），而且还需要处理响应式布局

3.APP（Native App） 手机桌面的应用
  IOS：object-c
  安卓：Java-native



  [hyBride模式] 混合模式
  我们开发的HTML5页面不仅仅可以在移动端的浏览器中运行，还可以运行在移动端的APP中（例如微信，我们写的HTML5页面可以运行咋微信APP中，其实是运行在微信APP的webView中的），我们可以吧APP中的webView理解为我们的webView内核的浏览器



Hybrid App按网页语言与程序语言的混合，通常分为三种类型：多View混合型，单View混合型，Web主体型。

多View混合型(目前常用的)
即Native View和Web View独立展示，交替出现。2012年常见的Hybrid App是Native View与WebView交替的场景出现。这种应用混合逻辑相对简单。即在需要的时候，将WebView当成一个独立的View（Activity）运行起来，在WebView内完成相关的展示操作。这种移动应用主体通常是Native App，Web技术只是起到补充作用。开发难度和Native App基本相当。

单View混合型
即在同一个View内，同时包括Native View和Web View。互相之间是覆盖（层叠）的关系。这种Hybrid App的开发成本较高，开发难度较大，但是体验较好。如百度搜索为代表的单View混合型移动应用，既可以实现充分的灵活性，又能实现较好的用户体验。

Web主体型(目前比较新颖流行的方式)
即移动应用的主体是Web View，主要以网页语言编写，穿插Native功能的Hybrid App开发类型。这种类型开发的移动应用体验相对而言存在缺陷，但整体开发难度大幅降低，并且基本可以实现跨平台。通俗来说，就是App中的页面基本上都是H5完成的，我们使用一些技术框架封装一个App的壳子，框架中还提供一些操作系统级别功能的API供H5的调取，一般来说，都是由JS编写代码来完成App壳子搭建的，这样开发的App也就不会在使用JAVA或者Object-c了。

目前市面上比较流行的框架有：React Native、phoneGap、appcan、APICloud、ionicframework、appMobi、WeX5...(珠峰培训的C阶段课程会给大家讲解React Native)

**********************************************************************************************************


右键+点击在此处打开命令窗口：lessc 1.less 1.css  -->会出现css文件夹
如果出不来，点击组织-->文件夹和搜索选项-->查看-->隐藏文件类型的扩展名（不选择隐藏）；


LESS/SASS
 -->CSS预编译语言
   ->不管是LESS还是SASS都是面向对象编程的：变量、函数...

但是LESS或者是SASS也好，他们编写出来的语法浏览器是不能进行解析的，我们在编写完成后，还需要单独的把LESS或者SASS编译成正常的CSS代码才可以

在当前文档打开命令窗口lessc less/index.less css/index.css就可以用node转译成浏览器能看懂的css


在当前文档打开命令窗口lessc less/index.less css/index.css -x就可以用node转译成浏览器能看懂的css压缩文件


base64什么时候用：图片特别大的时候，用3g的时候会卡死。不到逼不得已最好不要用