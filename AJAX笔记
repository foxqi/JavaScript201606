

Ajax：async javascript and xml 异步的JS和XML
->客户端JS中的方法，用来向服务器端发送请求（还可以传递给服务器端数据），然后把服务器端返回的内容获取到（Ajax一般是运行在客户端的浏览器中的）

Ajax四步：

     //1.创建一个Ajax对象（下面的这种写法在IE6及更低版本的浏览器中不支持）
     var xml=new XMLHttpRequest;  //此时的状态是0

    //2.发送前的基本信息配置（配置请求的方式（GET、POST、PUT、DELETE、HEAD），打开一个URL地址(配置向哪一个服务器地址发送请求)，同步还是异步（true代表异步  false代表同步）默认是true,
    [username]向服务器提供请求的用户名，
    [userpass]向服务器提供请求的用户密码 ，这俩个值一般不写，只有服务器做了安全限制，只允许特点的用户访问的话，我们才传递过去）

    xml.open('get','data.txt',false，[username],[userpass]);    //此时的状态是1
    //3.给onreadystatechange 这个事件绑定一个方法，监听状态的改变(只要状态改变，就触发方法执行)
    xml.onreadystatechange=function(){
    ->xml.readyState:请求状态码，可以代表当前处理的速度
    0 UNSENT 当前的请求还没有发送
    1 OPENED URL地址已经打开（发送前的参数配置已经完成）
    2 HEADER_RECEIVED 响应头信息已经接受
    3 LOADING  主要返回的内容正在服务器端进行准备处理
    4 DONE    响应主体的内容已经成功返回到客户端

    ->xml.status:HTTP网络状态码，描述了服务器响应内容的状态
     200 OR ^2\d{2} (200或者以2开头的)  ->都代表响应主体内容已经成功返回了
     301 ->永久重定向/永久转移
     302 ->临时重定向 临时转移  服务器的负载均衡
     304 ->本次获取的内容是读取缓存中的数据

     400 ->客户端传递给服务器端的参数出现错误
     401 ->无权限访问
     404 ->客户端访问的地址不存在

     500 ->未知的服务器错误
     503 ->服务器已经超负荷 一台服务器能承受10000人，那么第10001个人访问，如果没有做服务器的负载平衡，那么这个人的状态码就是503

        if(xml.readyState===4 && /^2\d{2}$/.test(xml.status)){
            data=utils.jsonParse(xml.responseText);
            console.log(data)
        }
    };
    //4.发送请求：参数是请求主体中传递给服务器的内容
    xml.send(null)


XML:可扩展的标记语言（在XML文件中使用的标签都是自己扩展的）
->利用自己扩展的有规则的标记来存储相关的数据
*************************************************************
html文档中所有的href和src 还有浏览器地址栏请求的类型全部是get方法

http方法
表示该http如何发送数据

get 从服务器获取资源
1 没有请求主体 (因为get是从服务器获取资源,不需要设置请求主体,所以get方法没有请求主体)
2 发送的数据有大小限制 (因为没有请求主体,只能把请求参数放入querystring,会造成url长度增加.但是浏览器对url的长度有大小限制ie 2k chrome 8k firefox 7k,所以get方法发送的数据有大小限制)
3 容易被浏览器缓存(节省带宽) 304缓存 和 强缓存
如何解决强缓存?
在url后拼接随机字符串,让url每次都不一样,这样就不会命中浏览器的强缓存.
4 明文发送

delete 告诉服务器删除一段资源
特点和get方法一样
成功的http状态码为202 不是200

head 获取http响应起始行和首部 (不包含主体)
特点和get方法一样
响应报文中没有响应主体
请求主体和响应主体都不存在

post 往服务器发送资源
1 有请求主体(因为post方法目的是往服务器发送数据,而且数据的大小是未知的.所有的数据都可以放到请求主体中)
2 没有大小限制(因为请求主体没有大小限制)
3 不会被浏览器缓存
4 可以不是明文发送(因为可以把数据放入querystring中,也可以放入请求主体)
5 一般用来发送数据量较大的数据(文件上传),或者不愿被看见的数据(账号密码)

put 往服务器推送资源
特点和post一样
成功的http状态码为202,不是200

让各个方法各司其职
增删改查(CURD)

增加 post
删除 delete
修改 put
查询 get

这种实现,就是server端接口的软件架构,叫Restful(表征状态转移)

处理学生列表的接口 /rest/1.0/userinfo

增加一个学生 POST /rest/1.0/userinfo {name:'xiaozhang',age:32}
删除id为1的学生 delete /rest/1.0/userinfo?id=1
修改id为1的学生 put /rest/1.0/userinfo?id=1 {name:'xiaozhang,age:18}
查询id为个学生 get /rest/1.0/userinfo?id=1
查询所有学生 get /rest/1.0/userinfo

angularjs 提供了restful服务 $resource

http 状态码
状态码是放在响应起始行中,所以收到状态码肯定会通过服务器,然后服务器返回.

表示服务器对该请求的处理结果
1xx http正在初始化  http2.0中只保留一个101
100 初始化
101 切换协议 websocket

2xx 客户端请求成功
200 ok 成功
202 accepted 接受 delete put

3xx 重定向和缓存
301 永久转移
服务器控制站点之间跳转 360buy.com -> jd.com
使用301会降低搜索引擎的权重(只要请求时该网站时返回301,跳转到其他网站,说明这个网站已经被废弃,所以搜索引擎会认为这个网站是无效网站,直接降低搜索权重)
302 临时转移
一般用于临时性跳转  登录功能
304 未改变(缓存) 304的缓存会每次去服务器校验
last-modifed if-modified-since 文件最后一次修改的时间
etag if-none-match 文件的实体标签

强缓存 不会去服务器校验
涉及到强缓存的两个响应首部
cache-control 缓存多少秒
expire 缓存到指定时间

4xx 客户端请求错误
400 错误的请求
请求参数错误 url长度超过server限制 端口错误 协议错误
401 未认证 没有登录网站
403 禁止访问 没有权限
404 未找到

5xx 服务器处理错误
500 服务器内部错误
503 服务器不可用

MIMEType
多用途因特网邮件扩展

作用:标识请求或者响应数据的类型,浏览器或者服务器根据该类型去进行处理.

MIME在http协议中通过通用首部content-type来表示
文本 text/plain
html text/html
css text/css
js text/js || application/javascript || application/x-javascript
png image/png
jpg image/jpeg
gif image/gif
json application/json
binary applicaiton/octect-stream
表单提交 application/x-www-form-urlencoded

格式 : 大类型/小类型


AJAX
异步JavaScript和xml

处理兼容性:
1 优雅降级
2 渐进增强

ajax通过浏览器提供的API和http服务器进行交互


ajax同步请求
在http事务完成之前,send方法后面执行逻辑会被阻塞,当http事务完成之后,send方法后面的逻辑继续执行
ajax异步请求
在http事务完成之后,send方法后面的执行逻辑不会被阻塞.
************************************************************************************
 var  xhr=createXHR();
    xhr.open('get','/gerList',true);

    // HTTP METHOD:客户端向服务器端发送请求的方式
//  以下的请求方式不管哪一种，都可以向服务器传递数据，也可以从服务器获取到数据，而且从本质意义上讲以下的方式是没有任何的区别的，例如：用POST做的事情，用GET也能做，而我们给大家接下来讲的区别都是目前开发这门约定俗称的规范

    //GET:一般应用于从服务器获取数据（给服务器的数据少，从服务器拿的数据多，项目中最常用的请求方式就是GET）
//  使用GET请求给服务器传递内容我们一般都使用“URL问号传参的方式”
  //xhr.open('get','/getList?num=12');

    //POST：一般应用于向服务器推送数据（给服务器的数据多，从服务器拿下来的数据少）
//  使用POST请求给服务器传递内容我们一般都使用“请求主体的方式”传递给服务器
  //xhr.open('post','/getList');
  //.send('{"name":"zhufeng","age":7}');

    //PUT：一般应用于给服务器上增加资源文件（我们上传图片功能）

    //DELETE：一般用于重服务器上删除资源文件

    //HEAD：一般应用于只获取服务器的响应头信息

    //...

//GET 和 POST 区别
//  ->大小限制
//   GET 请求传递给服务器的内容存在大小的限制，而POST理论上是没有限制的
//    原因：GET通过URL传参给服务器，而每个浏览器对于URL的长度存在限制，谷歌8kb，火狐7kb，IE 2kb的长度限制，如果URL的长度超过限制，浏览器会把超出的部分截取
//    ->缓存问题
//    GET请求会出现缓存（这个缓存不一定是304）,POST是没有缓存的
//    在项目中我们的GET请求一般不会让其出现缓存“清除缓存”
//  xhr.open('get','/getList?num=12&_='+Math.random());
//    ->安全问题
//    一般来说GET不安全，而POST相对安全一些
*************************************************************************************
//同步（SYNC）和 异步（ASYNC）编程

    //js是属于单线程的，我们最好使用异步编程
    //->定时器都是异步编程
    //->事件绑定都是异步编程
    //->回调函数也可以理解为异步编程
    //->在ajax中可以使用异步编程

  //    var count = 0;
      //    window.setTimeout(function () {
      //        count++;
      //        console.log(count);//->2) 1  1000ms
      //    }, 1000);
      //    console.log(count);//->1) 0

      //    var count = 0;
      //    window.setTimeout(function () {
      //        count++;
      //        console.log(count);//->2) 1
      //    }, 0);//->我们定时器的时间设置为0也不是立马执行,而是需要等待一段时间:谷歌5~6 IE10~13
      //    console.log(count);//->1) 0

      //    var count = 0;
      //    window.setTimeout(function () {
      //        count++;
      //        console.log(count);//->没有输出的:我们定时器设定1000ms后执行,不一定到达时间就执行,如果当前浏览器的线程被占用(现在是被死循环占用了),定时器就要一直等着
      //    }, 0);
      //    console.log(count);//->1) 0
      //    while (1) {
      //
      //    }

      //    var count = 0;
      //    window.setTimeout(function () {
      //        console.log("A");
      //    }, 10);
      //    window.setTimeout(function () {
      //        console.log("B");
      //    }, 6);
      //    var i = 0;
      //    while (i < 1000000000) {
      //        i++;
      //    }
      //    //->多个定时器,如果执行完成循环都到达时间了,先执行时间短的这个定时器


//    多个定时器如果执行完成循环都到达时间了，先执行时间短的这个定时器


//    AJAX中的同步：当AJAX任务开始的时候（xhr.send），一直需要到READY SATE===4的时候任务才结束，此时才可以出来其他的事情
//     AJAX中的异步：当AJAX任务开始的时候（xhr.send），不需要到READY SATE===4，我依然可以继续做其他的任务，并且只有当其他的任务完成后，我们在看是否到4，到达4的时候做一些相关操作
*********************************************************************************************
客户信息的增删改查


前端开发工程师

  ->API接口文档 (应用程序接口)

后台开发工程师


功能分析:
1、获取所有的客户信息
2、把页面中新填写的客户信息获取到，增加新的客户(把新的客户信息存储到服务器上)
3、获取某一个指定客户的信息，把信息放入到页面的对应位置
4、把原有客户的某些信息进行修改(把服务器上存储的那一份信息修改了)
5、删除指定客户信息(把服务器上之前存储的某一条删除掉)

服务器端后台开发：
首先需要在服务器上搭建一个服务(监听一个端口)，把我们的项目发布出去
1、根据客户端的请求把所有的客户信息准备好，并且返回给客户端
2、把客户端传递进来的新的客户信息增加到服务器的指定位置上(正常情况下都是存储到数据库中，我们今天的案例用文件存储代替数据库存储)，并且告诉客户端增加成功还是失败

客户端前端开发:
拿到PSD的效果图后,编写HTML+CSS等
1、通过AJAX向服务器端发送一个请求，把数据获取到，解析和数据绑定
2、把页面中用户输入的信息获取到，并给通过AJAX传递给服务器,接收服务器端告诉我们的成功还是失败，从而进行后续操作


//->API接口文档

客户端和服务器端的内容数据的传输一般都是通过JSON格式的字符串进行的

1、获取所有的客户信息
  URL:"/getList"   GET
  参数:{客户端传递给服务器端的内容}  无
  返回:{服务器端返回给客户端的内容}
      '{
         "code":0, //->返回结果的标识 0代表成功 1代表失败(没有任何的客户信息)
         "msg":"获取成功!", //->返回结果标识的说明信息
         "data":[
            {"id":xx,"name":"xxx","age":xx,"phone":"xxxxxx","address":"xxxxxxx"},
            ...
         ]
      }'

2、获取具体的某一个客户的信息
  URL:"/getInfo"   GET
  参数:?id=xx 把需要获取的客户的ID传递给服务器
  返回:
  '{
      "code":0, //->0成功 1失败(当前的客户信息不存在)
      "msg":"",
      "data":{
         "id":xxx,
         "name":"",
         "age":xx,
         "phone":"",
         "address":""
      }
  }'

3、增加客户信息
  URL:"/addInfo"  POST
  参数:请求主体中  '{"name":"","age":"","phone":"","address":""}' (哎~少了个ID,在增加的过程中,我们的ID是服务器端自动按照规律生成的:在现有的最后一个客户ID的基础上+1即可)

  返回:
  '{
      "code":0, //->0成功 1失败
      "msg":""
  }'

  （
  在增加客户信息中有这么一步
   req.on("data", function (chunk) {
              str += chunk;
          });//是将json格式的字符串一点一点添加到页面中

   req.on("end", function () {
              //这是完成后的样子：
              str='{"name":"","age":"","phone":"","address":""}';

  }
  ）

4、修改客户信息
  URL:"/updateInfo"  POST
  参数:请求主体中  '{"id":xx,"name":"","age":"","phone":"","address":""}'
  返回:
  '{
    "code":0, //->0成功 1失败
    "msg":""
  }'

5、删除客户信息
  URL:"/removeInfo"  GET
  参数:?id=xx
  返回:
    '{
      "code":0, //->0成功 1失败
      "msg":""
    }'
***************************************************************************************************************
跨域

同域请求
页面中所有ajax请求url中的scheme hostname port与当前宿主页面url中的scheme hostname port都一样的请求就叫同域请求

跨域请求
页面中所有的ajax请求url中的scheme hostname port和当前宿主页面url中的scheme hostname port有任何一个不一样,就叫做跨域请求

http://pan.baidu.com
http://www.baidu.com

同源策略
same origin policy

同源策略是一种约定,它规定了javascript可以在哪些地方执行.是浏览器厂商强制添加的一种安全限制.

同源策略的存在极大的限制了很多跨域操作.

a.com/userinfo 用户信息

如何绕过同源策略来完成一个跨域请求?

html不受同源策略限制的元素:script img iframe

script和img 会把加载过来的内容强制转换为指定内容
iframe 虽然可以正确加载内容,但是无法进行操作

为什么利用script标签实现的跨域方式叫做jsonp?
因为返回的数据格式为 functionName(JSON DATA); => JSON pading a function name => JSON pading => jsonp


jsonp的特点:
1 是用来解决跨域请求
2 利用script不受同源策略限制并且会把加载过来的内容强制当成js来执行
3 必须提前声明一个全局函数,这个全局函数的作用:及时获取服务器返回的数据,可以在这个函数里处理服务器返回的数据.
4 必须和server商定一个用来跨域接收数据全局函数名的querystring,这个querystring有一个专属名称jsonpcallback

jsonp的注意事项:
1 因为jsonp是通过script的src属性去加载的,所以jsonp只能是get方法请求
2 服务器返回的数据必须满足 "functionName(json data)" 这种格式,只要不满足,就不是jsonp接口.
3 jsonp接口必须存在一个jsonpcallback,如果不存在,就不是jsonp接口




另外一种高效跨域方式:跨域资源共享

CORS(cross origin resource sharing)

兼容性 ie8+

通过浏览器提供的API实现的跨域

标准浏览器:XMLHttpRequest
ie:XDomainRequest


cors的特点:
1 需要server添加一个响应首部Access-Control-Allow-Origin ,该首部有两个类型的值 "*" "指定域名"

jsonp和cors的相同点和不同点:

相同点:
1 都是进行跨域请求访问的
2 都是接口级别跨域(不是页面级别跨域)
3 都需要server端配合(只要是跨域都需要server配合,否则无法完成跨域请求)

不同点:
1 jsonp只能是get方法,而cors则是get put delete head post这个方法都可以使用
2 jsonp没有浏览器兼容性,而cors则是ie8+
3 jsonp使用script来实现过,而cors是通过浏览器提供的API来实现

为什么jsonp不是ajax?
答:ajax是通过浏览器提供操作http的API来实现请求的.而jsonp是通过script来实现的请求.所以jsonp不是ajax
















