

Ajax：async javascript and xml 异步的JS和XML
->客户端JS中的方法，用来向服务器端发送请求（还可以传递给服务器端数据），然后把服务器端返回的内容获取到（Ajax一般是运行在客户端的浏览器中的）

Ajax四步：

     //1.创建一个Ajax对象（下面的这种写法在IE6及更低版本的浏览器中不支持）
     var xml=new XMLHttpRequest;  //此时的状态是0

    //2.发送前的基本信息配置（配置请求的方式（GET、POST、PUT、DELETE、HEAD），打开一个URL地址(配置向哪一个服务器地址发送请求)，同步还是异步（true代表异步  false代表同步）默认是true,
    [username]向服务器提供请求的用户名，
    [userpass]向服务器提供请求的用户密码 ，这俩个值一般不写，只有服务器做了安全限制，只允许特点的用户访问的话，我们才传递过去）

    xml.open('get','data.txt',false，[username],[userpass]);    //此时的状态是1
    //3.给onreadystatechange 这个事件绑定一个方法，监听状态的改变(只要状态改变，就触发方法执行)
    xml.onreadystatechange=function(){
    ->xml.readyState:请求状态码，可以代表当前处理的速度
    0 UNSENT 当前的请求还没有发送
    1 OPENED URL地址已经打开（发送前的参数配置已经完成）
    2 HEADER_RECEIVED 响应头信息已经接受
    3 LOADING  主要返回的内容正在服务器端进行准备处理
    4 DONE    响应主体的内容已经成功返回到客户端

    ->xml.status:HTTP网络状态码，描述了服务器响应内容的状态
     200 OR ^2\d{2} (200或者以2开头的)  ->都代表响应主体内容已经成功返回了
     301 ->永久重定向/永久转移
     302 ->临时重定向 临时转移  服务器的负载均衡
     304 ->本次获取的内容是读取缓存中的数据

     400 ->客户端传递给服务器端的参数出现错误
     401 ->无权限访问
     404 ->客户端访问的地址不存在

     500 ->未知的服务器错误
     503 ->服务器已经超负荷 一台服务器能承受10000人，那么第10001个人访问，如果没有做服务器的负载平衡，那么这个人的状态码就是503

        if(xml.readyState===4 && /^2\d{2}$/.test(xml.status)){
            data=utils.jsonParse(xml.responseText);
            console.log(data)
        }
    };
    //4.发送请求：参数是请求主体中传递给服务器的内容
    xml.send(null)


XML:可扩展的标记语言（在XML文件中使用的标签都是自己扩展的）
->利用自己扩展的有规则的标记来存储相关的数据
************************************************************************************
 var  xhr=createXHR();
    xhr.open('get','/gerList',true);

    // HTTP METHOD:客户端向服务器端发送请求的方式
//  以下的请求方式不管哪一种，都可以向服务器传递数据，也可以从服务器获取到数据，而且从本质意义上讲以下的方式是没有任何的区别的，例如：用POST做的事情，用GET也能做，而我们给大家接下来讲的区别都是目前开发这门约定俗称的规范

    //GET:一般应用于从服务器获取数据（给服务器的数据少，从服务器拿的数据多，项目中最常用的请求方式就是GET）
//  使用GET请求给服务器传递内容我们一般都使用“URL问号传参的方式”
  //xhr.open('get','/getList?num=12');

    //POST：一般应用于向服务器推送数据（给服务器的数据多，从服务器拿下来的数据少）
//  使用POST请求给服务器传递内容我们一般都使用“请求主体的方式”传递给服务器
  //xhr.open('post','/getList');
  //.send('{"name":"zhufeng","age":7}');

    //PUT：一般应用于给服务器上增加资源文件（我们上传图片功能）

    //DELETE：一般用于重服务器上删除资源文件

    //HEAD：一般应用于只获取服务器的响应头信息

    //...

//GET 和 POST 区别
//  ->大小限制
//   GET 请求传递给服务器的内容存在大小的限制，而POST理论上是没有限制的
//    原因：GET通过URL传参给服务器，而每个浏览器对于URL的长度存在限制，谷歌8kb，火狐7kb，IE 2kb的长度限制，如果URL的长度超过限制，浏览器会把超出的部分截取
//    ->缓存问题
//    GET请求会出现缓存（这个缓存不一定是304）,POST是没有缓存的
//    在项目中我们的GET请求一般不会让其出现缓存“清除缓存”
//  xhr.open('get','/getList?num=12&_='+Math.random());
//    ->安全问题
//    一般来说GET不安全，而POST相对安全一些
*************************************************************************************
//同步（SYNC）和 异步（ASYNC）编程

    //js是属于单线程的，我们最好使用异步编程
    //->定时器都是异步编程
    //->事件绑定都是异步编程
    //->回调函数也可以理解为异步编程
    //->在ajax中可以使用异步编程

  //    var count = 0;
      //    window.setTimeout(function () {
      //        count++;
      //        console.log(count);//->2) 1  1000ms
      //    }, 1000);
      //    console.log(count);//->1) 0

      //    var count = 0;
      //    window.setTimeout(function () {
      //        count++;
      //        console.log(count);//->2) 1
      //    }, 0);//->我们定时器的时间设置为0也不是立马执行,而是需要等待一段时间:谷歌5~6 IE10~13
      //    console.log(count);//->1) 0

      //    var count = 0;
      //    window.setTimeout(function () {
      //        count++;
      //        console.log(count);//->没有输出的:我们定时器设定1000ms后执行,不一定到达时间就执行,如果当前浏览器的线程被占用(现在是被死循环占用了),定时器就要一直等着
      //    }, 0);
      //    console.log(count);//->1) 0
      //    while (1) {
      //
      //    }

      //    var count = 0;
      //    window.setTimeout(function () {
      //        console.log("A");
      //    }, 10);
      //    window.setTimeout(function () {
      //        console.log("B");
      //    }, 6);
      //    var i = 0;
      //    while (i < 1000000000) {
      //        i++;
      //    }
      //    //->多个定时器,如果执行完成循环都到达时间了,先执行时间短的这个定时器


//    多个定时器如果执行完成循环都到达时间了，先执行时间短的这个定时器


//    AJAX中的同步：当AJAX任务开始的时候（xhr.send），一直需要到READY SATE===4的时候任务才结束，此时才可以出来其他的事情
//     AJAX中的异步：当AJAX任务开始的时候（xhr.send），不需要到READY SATE===4，我依然可以继续做其他的任务，并且只有当其他的任务完成后，我们在看是否到4，到达4的时候做一些相关操作